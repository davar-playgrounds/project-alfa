/* Choose the appropriated agent to run the pipeline */

node ('docker.local.jenkins.slave') {
  try {
    def app
    def container
    def k8s
    def previousImage
    def previousVersion

    stage('checkout') {
      try {
        /* Let's make sure the repository cloned to Jenkins Workspace */
        checkout scm
        slackSend channel: '#devops', color: "good", message: 'Starting Jenkins pipeline for web-express application. (1/4)'
      } catch (exec) {
        slackSend channel: '#devops', color: "danger",  message: 'web-express checkout phase failed.'
      }
    }

    stage('build') {
        /* This builds the actual image */
        app = docker.build("kbulix/web-express")
        slackSend channel: '#devops', color: "good", message: 'web-express build phase complete. (2/4)'
    }

    stage('release') {
      try {
        /* Finally, we'll push the image. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
             app.push("v${env.BUILD_NUMBER}")
        }

        slackSend channel: '#devops', color: "good",  message: 'web-express release phase complete. (3/4)'
      }
      catch (exec) {
        echo exec
        slackSend channel: '#devops', color: "danger",  message: 'web-express release phase failed.'
      }
    }

    stage('deploy') {
      try {
        k8s = sh ( returnStdout: true, script: "kubectl get deployment | grep web-express | wc -l").trim()

        if ( k8s == '0' ) {
          echo sh ( returnStdout: true, script: "kubectl create -f jenkins/k8s/web-express-k8s.yaml").trim()
        } else {
          previousImage = sh ( returnStdout: true, script: "kubectl describe deployment | grep Image | awk '{print \$2}'").trim()
          previousVersion = sh ( returnStdout: true, script:  kubectl --namespace=development describe deployment | grep Image | awk '{print \$2}' | awk 'BEGIN{FS="\:"\ } {print $2}').trim()
          echo sh ( returnStdout: true, script: "kubectl --namespace=development  set image deployments/web-express web-express=docker.io/kbulix/web-express:v${env.BUILD_NUMBER}").trim()
        }

         slackSend channel: '#devops', color: "good",  message: 'web-express deploy phase complete. (4/4)'
      }
      catch (exec) {
        echo exec
        slackSend channel: '#devops', color: "danger",  message: 'web-express deploy phase failed.'
      }
    }

    stage ('clean up') {

      echo app.id
      echo sh ( returnStdout: true, script: "docker rmi -f ${previousImage}").trim()
      echo sh ( returnStdout: true, script: "docker rmi -f kbulix/web-express:latest").trim()
      echo sh ( returnStdout: true, script: "docker rmi -f registry.hub.docker.com/kbulix/web-express:${previousVersion}").trim()
      echo sh ( returnStdout: true, script: "docker container prune -f").trim()
    }

  } catch (exec) {
    if (currentBuild.currentResult == 'ABORTED') {
      slackSend channel: '#devops', color: "danger",  message: 'web-express pipeline has been aborted.'
    }
  }
}
