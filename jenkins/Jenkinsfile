/* Choose the appropriated agent to run the pipeline */

node ('docker.local.jenkins.slave') {
  try {
    def app

    stage('checkout') {
      try {
        /* Let's make sure the repository cloned to Jenkins Workspace */
        checkout scm
        slackSend channel: '#general', color: "good", message: 'Starting Jenkins pipeline for web-express application. (1/3)'
      } catch (exec) {
        slackSend channel: '#general', color: "danger",  message: 'web-express checkout phase failed.'
      }
    }

    stage('build') {
        /* This builds the actual image */
        app = docker.build("kbulix/web-express")
        def imageName = app.ImageName()
        slackSend channel: '#general', color: "good", message: 'web-express build phase complete. (2/3)'
    }

    stage('release') {
      try {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }

        slackSend channel: '#general', color: "good",  message: 'web-express release phase complete. 3/3'
        }
      catch (exec) {
        slackSend channel: '#general', color: "danger",  message: 'web-express release phase failed.'
      }
    }

    stage ('clean up') {
      def imageName = app.ImageName()
      sh 'docker image ${imageName}'
      // sh 'docker ps --filter "status=exited" | grep "days ago" | awk "{print $1}" | xargs --no-run-if-empty'
      // sh 'docker ps --filter "status=exited" | grep "days ago" | awk "{print $1}" | xargs --no-run-if-empty docker rm'
    }

  } catch (exec) {
    if (currentBuild.currentResult == 'ABORTED') {
      slackSend channel: '#general', color: "danger",  message: 'web-express pipeline has been aborted.'
    }
  }
}
