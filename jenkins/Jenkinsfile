/* Choose the appropriated agent to run the pipeline */

node ('docker.local.jenkins.slave') {
  try {
    def app
    def container

    stage('checkout') {
      try {
        /* Let's make sure the repository cloned to Jenkins Workspace */
        checkout scm
        slackSend channel: '#devops', color: "good", message: 'Starting Jenkins pipeline for web-express application. (1/4)'
      } catch (exec) {
        slackSend channel: '#devops', color: "danger",  message: 'web-express checkout phase failed.'
      }
    }

    stage('build') {
        /* This builds the actual image */
        app = docker.build("kbulix/web-express")
        println app.imageName()
        slackSend channel: '#devops', color: "good", message: 'web-express build phase complete. (2/4)'
    }

    stage('release') {
      try {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
      /*  docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
       *     app.push("${env.BUILD_NUMBER}")
       *     app.push("latest")
       *     app.tag("latest")
       *  } */

        slackSend channel: '#devops', color: "good",  message: 'web-express release phase complete. (3/4)'
        }
      catch (exec) {
        slackSend channel: '#devops', color: "danger",  message: 'web-express release phase failed.'
      }
    }

    stage('deploy') {
      try {

	      def containerIsRunning = sh ( returnStdout: true, script: """docker ps | grep $app.imageName() | wc -l""").trim()

        if ( containerIsRunning == '0' ) {
          app.tag("latest")
          container = app.run('-p 8080')
        } else {
          def containerRunning = sh ( returnStdout: true, script: """docker ps | grep $app.imageName()  | cut -b-12""").trim()
          println containerRunning
        }


        slackSend channel: '#devops', color: "good",  message: 'web-express deploy phase complete. (4/4)'
        }
      catch (exec) {
        slackSend channel: '#devops', color: "danger",  message: 'web-express deploy phase failed.'
      }
    }


    stage ('clean up') {
      /* def imageName = app.ImageName() */
      'docker container prune -f'
    }

  } catch (exec) {
    if (currentBuild.currentResult == 'ABORTED') {
      slackSend channel: '#devops', color: "danger",  message: 'web-express pipeline has been aborted.'
    }
  }
}
